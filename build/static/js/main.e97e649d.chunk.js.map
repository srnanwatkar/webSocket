{"version":3,"sources":["components/Modal.jsx","actions/actions.jsx","constants/constants.jsx","components/Dashboards.jsx","components/Loader.jsx","components/ErrorHandler.jsx","App.js","serviceWorker.js","reducer/stockDashboard.jsx","reducer/index.jsx","index.js"],"names":["Modal","className","this","props","isModalOpen","stockData","dataKey","onClick","handleModal","cellClass","currentValue","Math","max","history","min","data","height","style","fill","Component","handleLoader","value","dispatch","type","payload","setDataInStore","key","Dashboard","state","webSocketConnection","WebSocket","onopen","console","log","onmessage","handleStockEvents","bind","setTimeout","prevTime","timeDiff","moment","diff","prevValue","prevClass","event","JSON","parse","newStocks","map","item","push","Number","toFixed","lastUpdated","getTime","lastUpdatedTime","getDeviationClass","setState","Object","keys","i","color","connect","isLoading","stockDashboard","bindActionCreators","Loader","size","loading","ErrorHandler","App","error","info","Boolean","window","location","hostname","match","initialState","itemKey","action","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","multi","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e97e649d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Sparklines, SparklinesLine, SparklinesSpots } from 'react-sparklines';\r\n\r\nclass Modal extends Component {\r\n    render() {\r\n        return (\r\n            <div className={'modal-container' + (this.props.isModalOpen ? '' : ' hidden')}>\r\n                {\r\n                    this.props.stockData && this.props.dataKey ?\r\n                        <div className='modal'>\r\n                            <div className='modal-header'>\r\n                                <div className='header'>\r\n                                    <h3>Stock Data</h3>\r\n                                </div>\r\n                                <div className='close-icon'>\r\n                                    <span onClick={() => this.props.handleModal(false)}>x</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className='modal-content'>\r\n                                <div className='details-container'>\r\n                                    <h3>{this.props.dataKey}</h3>\r\n                                    <div className='gradient-container'></div>\r\n                                    <div className='value'>\r\n                                        <span className={'caret ' + this.props.stockData[this.props.dataKey].cellClass}></span>\r\n                                        Current Value: <span>{this.props.stockData[this.props.dataKey].currentValue} <i>(current stock stamp)</i></span>\r\n                                    </div>\r\n                                    <div className='disparity-container'>\r\n                                        <div><b>Max Stock value:</b> <span>{Math.max(...this.props.stockData[this.props.dataKey].history)}</span></div>\r\n                                        <div><b>Min Stock value:</b> <span>{Math.min(...this.props.stockData[this.props.dataKey].history)}</span></div>\r\n                                    </div>\r\n                                </div>\r\n                                {/* Graph plots */}\r\n                                <div className='graph-container'>\r\n                                    <Sparklines data={this.props.stockData[this.props.dataKey].history} height={30}>\r\n                                        <SparklinesLine style={{ fill: \"none\" }} />\r\n                                        <SparklinesSpots />\r\n                                    </Sparklines>\r\n                                </div>\r\n                            </div>\r\n                        </div> : null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;\r\n","import { SET_DATA, LOADING, SET_DATA_KEY, TOGGLE_MODAL } from \"../constants/constants\";\r\n\r\n/**\r\n * Handle on init Loader\r\n * @param value\r\n */\r\nexport function handleLoader(value) {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: LOADING,\r\n            payload: value\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * Set the Stock data in the store\r\n * @param data\r\n */\r\nexport function setDataInStore(data) {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: SET_DATA,\r\n            payload: data\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * Handle Modal open/close\r\n * @param key \r\n */\r\nexport function handleModal(key) {\r\n    return (dispatch) => {\r\n        dispatch([\r\n            {\r\n                type: SET_DATA_KEY,\r\n                payload: key ? key : ''\r\n            },\r\n            {\r\n                type: TOGGLE_MODAL,\r\n                payload: key ? true : false\r\n            }\r\n        ]);\r\n    };\r\n}\r\n","\r\nexport const LOADING = 'LOADING';\r\nexport const SET_DATA = 'SET_DATA';\r\nexport const SET_DATA_KEY = 'SET_DATA_KEY';\r\nexport const TOGGLE_MODAL = 'TOGGLE_MODAL';\r\n\r\nexport const FEW_SECONDS_AGO = 'a few seconds ago';\r\nexport const _SECONDS_AGO = ' seconds ago';\r\nexport const _MINUTES_AGO = ' minutes ago';\r\nexport const _HOURS_AGO = ' hours ago';\r\n","import React, { Component, Fragment } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport moment from 'moment';\r\nimport {\r\n    FEW_SECONDS_AGO, _HOURS_AGO, _MINUTES_AGO, _SECONDS_AGO\r\n} from '../constants/constants';\r\nimport {\r\n    Sparklines, SparklinesLine, SparklinesReferenceLine\r\n} from 'react-sparklines';\r\nimport Modal from './Modal';\r\n\r\n/* functions from actions */\r\nimport { handleLoader, handleModal, setDataInStore } from './../actions/actions';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nconst webSocketUrl = 'ws://stocks.mnet.website/';\r\n\r\nclass Dashboard extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data: {},\r\n            key: ''\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.webSocketConnection = new WebSocket(webSocketUrl);\r\n        this.webSocketConnection.onopen = () => {\r\n            /* On Connection Open */\r\n            console.log('Connection Created');\r\n        };\r\n        this.webSocketConnection.onmessage = this.handleStockEvents.bind(this);\r\n\r\n        /* Call Action Loader */\r\n        this.props.handleLoader(true);\r\n    }\r\n\r\n    componentDidMount() {\r\n        /* Call Action, for Loading experience */\r\n        setTimeout(() => {\r\n            this.props.handleLoader(false);\r\n        }, 3000);\r\n    }\r\n\r\n    getTime(prevTime) {\r\n        const timeDiff = moment().diff(prevTime, 'seconds');\r\n        let timeText = '';\r\n\r\n        /* Get display text to render */\r\n        if (timeDiff < 60) {\r\n            timeText = timeDiff === 0 ? FEW_SECONDS_AGO : timeDiff + _SECONDS_AGO;\r\n        } else if (timeDiff > 60 && timeDiff < 3600) {\r\n            timeText = (timeDiff % 60) + _MINUTES_AGO;\r\n        } else {\r\n            timeText = ((timeDiff % 60) % 60) + _HOURS_AGO;\r\n        }\r\n\r\n        return timeText;\r\n    }\r\n\r\n    getDeviationClass(prevValue, currentValue, prevClass) {\r\n        if (prevValue - currentValue > 0) {\r\n            return 'stock-down';\r\n        } else if (prevValue - currentValue < 0) {\r\n            return 'stock-up';\r\n        } else {\r\n            return prevClass;\r\n        }\r\n    }\r\n\r\n    handleStockEvents(event) {\r\n\r\n        let stockData = JSON.parse(event.data);\r\n        let newStocks = this.state.data;\r\n\r\n        /* Create Associative array for each stocks */\r\n        stockData.map(item => {\r\n            /* Check if it is a new stock */\r\n            if (!newStocks[item[0]]) {\r\n                newStocks[item[0]] = {\r\n                    currentValue: Number(item[1]).toFixed(4),\r\n                    lastUpdated: FEW_SECONDS_AGO,\r\n                    lastUpdatedTime: moment(),\r\n                    history: [Number(item[1]).toFixed(2)],\r\n                    cellClass: '',\r\n                };\r\n            } else {\r\n                /* Maintain history to plot graph */\r\n                newStocks[item[0]].history.push(Number(item[1]).toFixed(2));\r\n\r\n                /* Update current stock data */\r\n                newStocks[item[0]] = {\r\n                    lastUpdated: this.getTime(newStocks[item[0]].lastUpdatedTime),\r\n                    lastUpdatedTime: moment(),\r\n                    cellClass: this.getDeviationClass(newStocks[item[0]].currentValue, item[1], newStocks[item[0]].cellClass),\r\n                    currentValue: Number(item[1]).toFixed(4),\r\n                    history: newStocks[item[0]].history\r\n                };\r\n            }\r\n        });\r\n\r\n        /* Set State the current Value */\r\n        this.setState({\r\n            data: newStocks\r\n        });\r\n\r\n        /* Set Data in Store */\r\n        this.props.setDataInStore(this.state.data);\r\n    }\r\n\r\n    handleModal(key) {\r\n        // this.props.handleModal(key, true);\r\n        this.setState({\r\n            isModalOpen: key ? true : false,\r\n            key: key ? key : ''\r\n        });\r\n\r\n        /* Manager data in store */\r\n        this.props.handleModal(key)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className='dashboard-container'>\r\n\r\n                    {/* Heading */}\r\n                    <div className='heading-container'>\r\n                        <h2>Live Stock Rates</h2>\r\n                    </div>\r\n\r\n                    {/* Stocks Table data rendering  */}\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <td className='stock-header stock-name'>Name</td>\r\n                                <td className='stock-header stock-value'>Value</td>\r\n                                <td className='stock-header stock-updated'>Last Updated</td>\r\n                                <td className='stock-header stock-plot'>Plot</td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                Object.keys(this.state.data).map((item, i) => {\r\n                                    return <tr key={i} className='row-container' onClick={() => this.handleModal(item)} >\r\n                                        <td>\r\n                                            {item}\r\n                                        </td>\r\n                                        <td>\r\n                                            <div className='value-container'>\r\n                                                <span className={'caret ' + this.state.data[item].cellClass}></span>\r\n                                                <div>{this.state.data[item].currentValue}</div>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            {this.state.data[item].lastUpdated}\r\n                                        </td>\r\n                                        <td>\r\n                                            <Sparklines data={this.state.data[item].history} height={40}>\r\n                                                <SparklinesLine color=\"green\" />\r\n                                                <SparklinesReferenceLine type=\"mean\" />\r\n                                            </Sparklines>\r\n                                        </td>\r\n                                    </tr>\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div >\r\n                <Modal\r\n                    isModalOpen={this.props.isModalOpen}\r\n                    stockData={this.state.data}\r\n                    dataKey={this.state.key}\r\n                    handleModal={this.handleModal.bind(this)} />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoading: state.stockDashboard.isLoading,\r\n        isModalOpen: state.stockDashboard.isModalOpen,\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * Actions\r\n */\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators({\r\n        handleLoader,\r\n        setDataInStore,\r\n        handleModal\r\n    }, dispatch);\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { RingLoader } from 'react-spinners';\r\n\r\nclass Loader extends Component {\r\n    render() {\r\n        return (\r\n            this.props.isLoading ? <div className='loader-overlay'>\r\n                <RingLoader\r\n                    size={70}\r\n                    color={\"#123abc\"}\r\n                    loading={this.props.isLoading}\r\n                />\r\n            </div> : null\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoading: state.stockDashboard.isLoading\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(Loader);\r\n","import React, { Component } from 'react';\r\n\r\nexport default class ErrorHandler extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Something went wrong.....\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react';\nimport Dashboard from './components/Dashboards';\nimport Loader from './components/Loader';\nimport ErrorHandler from './components/ErrorHandler';\nimport './scss/index.scss';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      error: null,\n      info: null\n    }\n  }\n\n  /**\n   * Handle Component Errors\n   * @param error \n   * @param info \n   */\n  componentDidCatch(error, info) {\n    this.setState({\n      error,\n      info\n    });\n  }\n\n\n  render() {\n    return (\n      <div className='app-container'>\n        {\n          this.state.error ? <ErrorHandler error={this.state.error} info={this.state.info} /> :\n            <Fragment>\n              {/* Loader */}\n              <Loader />\n              {/* Dashboard Container */}\n              <Dashboard />\n            </Fragment>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { LOADING, SET_DATA, TOGGLE_MODAL, SET_DATA_KEY } from '../constants/constants';\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    stockData: null,\r\n    isModalOpen: false,\r\n    itemKey: ''\r\n};\r\n\r\nconst stockDashboard = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOADING:\r\n            return state = {\r\n                ...state,\r\n                isLoading: action.payload\r\n            };\r\n        case SET_DATA:\r\n            return state = {\r\n                ...state,\r\n                stockData: action.payload\r\n            }\r\n        case TOGGLE_MODAL:\r\n            return state = {\r\n                ...state,\r\n                isModalOpen: action.payload\r\n            }\r\n        case SET_DATA_KEY:\r\n            return state = {\r\n                ...state,\r\n                itemKey: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default stockDashboard;","import { combineReducers } from 'redux';\r\nimport stockDashboard from './stockDashboard';\r\n\r\n/* Combine all the reducers here */\r\nexport default combineReducers({\r\n    stockDashboard\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport multi from 'redux-multi';\nimport rootReducer from './reducer/index.jsx';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, multi));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}